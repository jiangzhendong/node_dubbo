{
  "name": "hessian-proxy",
  "version": "0.0.5",
  "description": "hessian proxy to make rpc calls for javascript",
  "main": "./lib/index.js",
  "scripts": {
    "test": "make test"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:villadora/node-hessian.git"
  },
  "keywords": [
    "hessian",
    "rpc",
    "binary protocol",
    "hessian 2.0"
  ],
  "dependencies": {
    "buffer-builder": "~0.1.0",
    "buffer-reader": "~0.0.2",
    "long": "~1.1.2"
  },
  "devDependencies": {
    "es6-map-shim": "*",
    "grunt": "~0.4.1",
    "jshint": "~2.1.9",
    "mocha": "~1.12.0",
    "chai": "~1.7.2",
    "async": "~0.2.9",
    "grunt-contrib-jshint": "0.3.x",
    "grunt-contrib-clean": "0.4.x",
    "grunt-contrib-watch": "0.3.x"
  },
  "readmeFilename": "README.md",
  "author": {
    "name": "wei.gao",
    "email": "jky239@gmail.com"
  },
  "license": "BSD",
  "readme": "# Node Hessian Proxy\n\nRPC Proxy support hessian 2.0 protocol, with fully tested via test service in [http://hessian.caucho.com/test/test2](http://hessian.caucho.com/test/test2)\n\n\nI couldn't not find a stable hessian 1.0 protocol test service. so 1.0 is not fully implmented yet.\n\n\n[![Build Status](https://travis-ci.org/villadora/node-hessian.png?branch=master)](https://travis-ci.org/villadora/node-hessian)\n\n## Installation\n\n    npm install hessian-proxy\n\n## Usage\n\n``` js\nvar Proxy = require('hessian-proxy').Proxy;\n\nvar proxy = new Proxy('http://example.com/test', username, password, proxy);\n\nproxy.invoke(methodName, [arg1, arg2, arg3..], function(err, reply) {\n    // ... do with reply\n});\n\n// use writer2\nvar Writer = require('hessian-proxy').Writer2; // for hessian2.0\n\nvar writer = new Writer();\nwriter.writeCall(method, [arg1, arg2â€¦]);\n\nvar buffer = writer.getBuffer();\n\n// use reader2\nvar Reader = require('hessian-proxy').Reader2; // for hessian2.0\n\nvar reader = new Reader();\nvar data = reader.readRPCMessage(buffer).getData();\n\n\n\n```\n\n\n\n## Support Value Types\n\n### Binary\n\nBinary will be represented by _Buffer_ in node js.\n\n### Boolean\n\n_true_ or _false_\n\n### Date\n\nRepresented as _Date_ type.\n\n### Double\n\nIn javascript, all double are numbers and represented via 64-bit double. so it will not be able to write a 32-bit float format, but it can read 32-bit float as double.\n\n\n### Int\n\nJust as normal int.\n\n### List\n\nArrays will be sent as list, typed list need to add a property '__type__' to the array.\nTyped List will have type in '__type__' property.\n\n``` js\n// untyped list\nvar list = [1,2,3];\n\n// typed list\nvar list = ['a', 'b', 'c'];\nlist.__type__ = '[string';\n```\n\n### Long\n\nuse [Long.js](https://npmjs.org/package/long) to handle long value.\n\n``` js\nvar Long = require('long');\n\nvar long = new Long(low, high);\n\n// or \nvar long = { low: lowbit, high: highbit };\n```\n\n\n### Map\n\nIf you don't care about key type, all the keys will be string. the normal Object will be treated as a map. If you want to parse/send maps that use objects as key. You have to expose a ES6 standard _Map_ Class to global namespace.\n\nAnd typed Map will have type in '__mapType__' property.\n\nFor example:\n```js\nglobal.Map = require('es6-map-shim').Map;\n```\n\n```js\n// normal untyped map, all the key will be string\nvar map = {  \n\t1: 1,\n\t'a': 0, \n\t'b': 2\n};\n\n// normal typed map\nvar map = {  \n    'a': 0, \n    'b': 1\n};\n\nmap.__mapType__ = 'java.util.Hashtable';\n\n// es6 Map, object can be used as key\nvar map = new Map();\nmap.set(['a'], 0);\nmap.set('b', 1);\nmap.set(true, 'true');\n\n// add type\nmap.__mapType__ = 'java.util.Hashtable';\n\n```\n\n### Ref\n\nThe proxy will take the job for you if the objects are equal via strict equal '===='.\n\n\n### Object\n\nTo send Object, objects must have a type in '__type__' property. Otherwise, it will be send as a map.\n\n```js\nvar obj = {\n    'value': 0,\n    'next': 1\n};\n\nobj.__type__ = 'com.test.TestObject';\n\n```\n\n### Null\n\nJust as null.\n\n\n### Web Service\n\nFor webservice support call, reply, fault. packet+ and envelope+ current are not supported yet.\n\n\n###### See _[test/test2.js](./test/test2.js)_ to get more examples how to use specific type.\n\n\n## Reference\n\n[Hessian 2.0 Serialization](http://hessian.caucho.com/doc/hessian-serialization.html)\n\n[Hessian 2.0 Web Service Protocol](http://hessian.caucho.com/doc/hessian-ws.html)\n\n[Hessian Test](http://javadoc4.caucho.com/com/caucho/hessian/test/TestHessian2.html)\n\n[Hessian 1.0 Spec](http://hessian.caucho.com/doc/hessian-1.0-spec.xtp)\n\nNotice: There are _some_ mistakes in the document and make a lot of confuse when writing protocol according to spec, especially when doing test and just find test docs are not correct for some arguments values.\n\n\n## License\n\n(The BSD License)\n\n    Copyright (c) 2013, Villa.Gao <jky239@gmail.com>;\n    All rights reserved.\n",
  "bugs": {
    "url": "https://github.com/villadora/node-hessian/issues"
  },
  "homepage": "https://github.com/villadora/node-hessian",
  "_id": "hessian-proxy@0.0.5",
  "_from": "hessian-proxy@*"
}
